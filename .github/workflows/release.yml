name: Build & Package

on:
  push:
    branches: [ main, 'develop-**', 'dev/**' ]
    paths-ignore:
      - 'resource/locale/template/**'
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [ 'develop-**', 'dev/**' ]
    paths-ignore:
      - 'resource/locale/template/**'
      - 'docs/**'
      - '**.md'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  EXECUTABLE_OUTPUT_PATH: ./

jobs:
  build:
    strategy:
      matrix:
        os: [ 'ubuntu-18.04', 'macos-10.15', 'windows-2019' ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set git to use LF(Windows) or CRLF(MacOS) line endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        if: matrix.os == 'windows-2019' || matrix.os == 'macos-10.15'

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get Short SHA of Commit
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Install Dependence (Linux)
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential binutils git autoconf automake gettext texinfo
          sudo apt-get -y install gcc-8 g++-8 ninja-build
          sudo apt-get -y install libconfig++-dev libboost-all-dev libarchive-dev libssl-dev
          sudo apt-get -y install gpgsm libxcb-xinerama0 libxcb-icccm4-dev libcups2-dev libdrm-dev libegl1-mesa-dev
          sudo apt-get -y install libgcrypt11-dev libnss3-dev libpci-dev libpulse-dev libudev-dev libxtst-dev gyp
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-image0
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-*
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8
          sudo update-alternatives --set gcc "/usr/bin/gcc-8"
          sudo update-alternatives --set g++ "/usr/bin/g++-8"
        if: matrix.os == 'ubuntu-18.04'

      - name: Codesign Configuration (macOS)
        run: |
          echo ${{secrets.MACOS_CERTIFICATE}} | base64 --decode > certificate.p12
          security create-keychain -p gpgfrontend build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p gpgfrontend build.keychain
          security import certificate.p12 -k build.keychain -P ${{secrets.MAOS_CERTIFICATE_PWD}} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k gpgfrontend build.keychain
          security set-keychain-settings -lut 3600
        if: matrix.os == 'macos-10.15'

      - name: Install Dependence (macOS)
        run: |
          brew install cmake autoconf automake qt@5 texinfo gettext openssl@1.1
          brew install boost ninja libarchive libconfig gpgme
          brew unlink gettext && brew link --force gettext
          brew link qt@5
          brew link openssl@1.1 --force
        if: matrix.os == 'macos-10.15'

      - name: Build gpg-error (Linux)
        run: |
          cd  ${{github.workspace}}/third_party/libgpg-error
          ./autogen.sh
          ./configure --enable-maintainer-mode && make -j2
          sudo make install
          cd ${{github.workspace}}
        if: matrix.os == 'ubuntu-18.04'

      - name: Build assuan (Linux)
        run: |
          cd ${{github.workspace}}/third_party/libassuan
          ./autogen.sh
          ./configure --enable-maintainer-mode && make -j2
          sudo make install
          cd ${{github.workspace}}
        if: matrix.os == 'ubuntu-18.04'

      - name: Build GpgME (Linux)
        run: |
          cd  ${{github.workspace}}/third_party/gpgme
          ./autogen.sh
          ./configure --enable-maintainer-mode --enable-languages=cpp && make -j2
          sudo make install
          cd ${{github.workspace}}
        if: matrix.os == 'ubuntu-18.04'

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache
        if: matrix.os == 'ubuntu-18.04'

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
        if: matrix.os == 'ubuntu-18.04'

      - name: Set up MinGW (Windows)
        uses: msys2/setup-msys2@v2
        with:
          install: git msys2-devel base-devel binutils mingw-w64-x86_64-toolchain
          release: false
        if: matrix.os == 'windows-2019'

      - name: Set up Dependence (Windows)
        shell: msys2 {0}
        run: |
          pacman --noconfirm -S --needed mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-cmake autoconf 
          pacman --noconfirm -S --needed make texinfo mingw-w64-x86_64-libconfig mingw-w64-x86_64-boost automake 
          pacman --noconfirm -S --needed mingw-w64-x86_64-qt5 libintl msys2-runtime-devel gettext-devel mingw-w64-x86_64-gpgme
          pacman --noconfirm -S --needed mingw-w64-x86_64-ninja mingw-w64-x86_64-gnupg mingw-w64-x86_64-libarchive
        if: matrix.os == 'windows-2019'

      - name: Build GpgFrontend (Linux)
        # Build your GpgFrontend with the given configuration
        run: |
          cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build ${{github.workspace}}/build --config {{$env.BUILD_TYPE}} -- -v
        if: matrix.os == 'ubuntu-18.04'

      - name: Build GpgFrontend (macOS)
        # Build your GpgFrontend with the given configuration
        run: |
          cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1
          cmake --build ${{github.workspace}}/build --config {{$env.BUILD_TYPE}} -- -v
        if: matrix.os == 'macos-10.15'

      - name: Build & Sign App Bundle (macOS)
        run: |
          security -v unlock-keychain -p gpgfrontend
          macdeployqt ${{github.workspace}}/build/release/GpgFrontend.app
          codesign --deep --force --options=runtime -s "Developer ID Application: Yu Hu (4279AWUL3X)" ${{github.workspace}}/build/release/GpgFrontend.app -v
          mkdir ${{github.workspace}}/build/tmp/
        if: matrix.os == 'macos-10.15'

      - name: Package & Sign App Bundle (macOS)
        run: |
          security -v unlock-keychain -p gpgfrontend
          hdiutil create ${{github.workspace}}/build/tmp/tmp.dmg -ov -volname "GpgFrontend" -fs HFS+ -srcfolder ${{github.workspace}}/build/release/
          mkdir ${{github.workspace}}/build/artifactOut
          hdiutil convert ${{github.workspace}}/build/tmp/tmp.dmg -format UDZO -o ${{github.workspace}}/build/artifactOut/GpgFrontend.dmg
          codesign -s "Developer ID Application: Yu Hu (4279AWUL3X)" ${{github.workspace}}/build/artifactOut/GpgFrontend.dmg
          mv ${{github.workspace}}/build/artifactOut/GpgFrontend.dmg ${{github.workspace}}/build/artifactOut/GpgFrontend-${{steps.vars.outputs.sha_short}}-x86_64.dmg
        if: matrix.os == 'macos-10.15'

      - name: Notarize Release Build (macOS)
        run: |
          xcrun altool --notarize-app -f ${{github.workspace}}/build/artifactOut/GpgFrontend-${{steps.vars.outputs.sha_short}}-x86_64.dmg  --primary-bundle-id pub.gpgfrontend.gpgfrontend -u ${{secrets.APPLE_DEVELOPER_ID}} -p ${{secrets.APPLE_DEVELOPER_ID_SECRET}}
        if: matrix.os == 'macos-10.15'

      - name: Package App Image (Linux)
        run: |
          mkdir ${{github.workspace}}/build/artifactOut
          cd ${{github.workspace}}/build/artifactOut
          wget -c -nv https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod u+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage ${{github.workspace}}/build/release/gpgfrontend/usr/share/applications/*.desktop -appimage
        if: matrix.os == 'ubuntu-18.04'

      - name: Configure CMake & Build Binary(Windows)
        shell: msys2 {0}
        run: |
          cd $(echo "/${{github.workspace}}"  | sed 's/\\/\//g' | sed 's/://')
          mkdir build && cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGPGFRONTEND_BUILD_TYPE_STABLE=ON ..
          # Build your program with the given configuration
          cmake --build . --config ${{env.BUILD_TYPE}}  -- -j 2
        if: matrix.os == 'windows-2019'

      - name: Upload Artifact(Linux)
        uses: actions/upload-artifact@master
        with:
          name: gpgfrontend-${{matrix.os}}-${{env.BUILD_TYPE}}-${{steps.vars.outputs.sha_short}}
          path: ${{github.workspace}}/build/artifactOut/GpgFrontend*.AppImage*
        if: matrix.os == 'ubuntu-18.04'

      - name: Upload Artifact(macOS)
        uses: actions/upload-artifact@master
        with:
          name: gpgfrontend-${{matrix.os}}-${{env.BUILD_TYPE}}-${{steps.vars.outputs.sha_short}}
          path: ${{github.workspace}}/build/artifactOut/*
        if: matrix.os == 'macos-10.15'

      - name: Upload Artifact(Windows)
        uses: actions/upload-artifact@master
        with:
          name: gpgfrontend-${{matrix.os}}-${{env.BUILD_TYPE}}-${{steps.vars.outputs.sha_short}}
          path: ${{github.workspace}}/build/release/*
        if: matrix.os == 'windows-2019'
