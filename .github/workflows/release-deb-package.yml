name: Build Linux Packages

on:
  push:
    branches: [ main, develop-** ]
    paths-ignore:
      - 'resource/locale/template/**'
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [ develop-** ]
    paths-ignore:
      - 'resource/locale/template/**'
      - 'docs/**'
      - '**.md'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  EXECUTABLE_OUTPUT_PATH: ./

jobs:
  build:
    strategy:
      matrix:
        os: [ 'ubuntu-18.04', 'ubuntu-20.04' ]
    runs-on: ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get Short SHA of Commit
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Install Dependence (Ubuntu 18.04)
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential binutils git autoconf automake gettext texinfo
          sudo apt-get -y install gcc-8 g++-8 libconfig++-dev libboost-all-dev
          sudo apt-get -y install gpgsm libxcb-xinerama0 libxcb-icccm4-dev libcups2-dev libdrm-dev libegl1-mesa-dev
          sudo apt-get -y install libgcrypt11-dev libnss3-dev libpci-dev libpulse-dev libudev-dev libxtst-dev gyp ninja-build
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-image0
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-*
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8
          sudo update-alternatives --set gcc "/usr/bin/gcc-8"
          sudo update-alternatives --set g++ "/usr/bin/g++-8"
        if: matrix.os == 'ubuntu-18.04'

      - name: Install Dependence (Ubuntu 20.04)
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential binutils git autoconf automake gettext texinfo
          sudo apt-get -y install gcc g++ libconfig++-dev libboost-all-dev
          sudo apt-get -y install gpgsm libxcb-xinerama0 libxcb-icccm4-dev libcups2-dev libdrm-dev libegl1-mesa-dev
          sudo apt-get -y install libgcrypt20-dev libnss3-dev libpci-dev libpulse-dev libudev-dev libxtst-dev gyp ninja-build
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-image0
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-*
        if: matrix.os == 'ubuntu-20.04'

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-5.12.8

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: '5.12.8'

      - name: Build gpg-error
        run: |
          cd  ${{github.workspace}}/third_party/libgpg-error
          ./autogen.sh
          ./configure --enable-maintainer-mode --enable-static=yes && make -j2
          sudo make install
          cd ${{github.workspace}}

      - name: Build assuan
        run: |
          cd ${{github.workspace}}/third_party/libassuan
          ./autogen.sh
          ./configure --enable-maintainer-mode --enable-static=yes && make -j2
          sudo make install
          cd ${{github.workspace}}

      - name: Build GpgME
        run: |
          cd  ${{github.workspace}}/third_party/gpgme
          ./autogen.sh
          ./configure --enable-maintainer-mode --enable-static=yes --enable-languages=cpp && make -j2
          sudo make install
          cd ${{github.workspace}}

      - name: Build & Package GpgFrontend (Linux DEB Package)
        # Build your program with the given configuration
        run: |
          cmake -B ${{github.workspace}}/build-deb-${{matrix.os}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_BUILD_TYPE="Release" -DGENERATE_LINUX_INSTALL_SOFTWARE=ON
          cmake --build ${{github.workspace}}/build-deb-${{matrix.os}} --config {{$env.BUILD_TYPE}}  -- -j 2
          cd ${{github.workspace}}/build-deb-${{matrix.os}}
          make package
          cd ${{github.workspace}}

      - name: Upload Artifact(Linux DEB)
        uses: actions/upload-artifact@master
        with:
          name: gpgfrontend-${{matrix.os}}-${{env.BUILD_TYPE}}-${{steps.vars.outputs.sha_short}}-deb-${{matrix.os}}
          path: ${{github.workspace}}/build-deb-${{matrix.os}}/gpgfrontend*.deb*
