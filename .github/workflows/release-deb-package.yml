name: Build Linux Packages

on:
  push:
    branches: [ main, 'develop-**', 'dev/**' ]
    paths-ignore:
      - 'resource/locale/template/**'
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [ 'develop-**', 'dev/**' ]
    paths-ignore:
      - 'resource/locale/template/**'
      - 'docs/**'
      - '**.md'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  EXECUTABLE_OUTPUT_PATH: ./

jobs:
  build:
    strategy:
      matrix:
        os: [ 'ubuntu-20.04' ]
    runs-on: ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get Short SHA of Commit
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Install Dependence (Ubuntu 20.04)
        run: |
          sudo apt-get update
          sudo apt-get -y install build-essential binutils git autoconf automake gettext texinfo qt5-default ninja-build
          sudo apt-get -y install gcc g++ libconfig++-dev libboost-all-dev
          sudo apt-get -y install gpgsm libxcb-xinerama0 libxcb-icccm4-dev libcups2-dev libdrm-dev libegl1-mesa-dev
          sudo apt-get -y install libgcrypt20-dev libnss3-dev libpci-dev libpulse-dev libudev-dev libxtst-dev gyp ninja-build
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-image0
          sudo apt-get -y install libglu1-mesa-dev libfontconfig1-dev libx11-xcb-dev libicu-dev libxcb-*
        if: matrix.os == 'ubuntu-20.04'

      - name: Build gpg-error
        run: |
          cd  ${{github.workspace}}/third_party/libgpg-error
          ./autogen.sh
          ./configure --enable-maintainer-mode --enable-static=yes && make -j2
          sudo make install
          cd ${{github.workspace}}

      - name: Build assuan
        run: |
          cd ${{github.workspace}}/third_party/libassuan
          ./autogen.sh
          ./configure --enable-maintainer-mode --enable-static=yes && make -j2
          sudo make install
          cd ${{github.workspace}}

      - name: Build vmime
        run: |
          cd ${{github.workspace}}/third_party/vmime
          mkdir build
          cd build
          cmake -G Ninja -DVMIME_HAVE_MESSAGING_PROTO_SENDMAIL=OFF -DVMIME_CHARSETCONV_LIB=iconv -DVMIME_TLS_SUPPORT_LIB=openssl -DVMIME_HAVE_SASL_SUPPORT=OFF ..
          ninja -v
          sudo ninja install
          cd ${{github.workspace}}

      - name: Build GpgME
        run: |
          cd  ${{github.workspace}}/third_party/gpgme
          ./autogen.sh
          ./configure --enable-maintainer-mode --enable-static=yes --enable-languages=cpp && make -j2
          sudo make install
          cd ${{github.workspace}}

      - name: Build & Package GpgFrontend (Linux DEB Package)
        # Build your program with the given configuration
        run: |
          cmake -B ${{github.workspace}}/build-deb-${{matrix.os}} -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_BUILD_TYPE="Release" -DGENERATE_LINUX_INSTALL_SOFTWARE=ON
          cmake --build ${{github.workspace}}/build-deb-${{matrix.os}} --config {{$env.BUILD_TYPE}} -- -v
          cd ${{github.workspace}}/build-deb-${{matrix.os}}
          ninja package
          cd ${{github.workspace}}

      - name: Upload Artifact(Linux DEB)
        uses: actions/upload-artifact@master
        with:
          name: gpgfrontend-${{matrix.os}}-${{env.BUILD_TYPE}}-${{steps.vars.outputs.sha_short}}-deb-${{matrix.os}}
          path: ${{github.workspace}}/build-deb-${{matrix.os}}/gpgfrontend*.deb*
